syntax = "proto3";
package sonrio.sonr.identity;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "sonr/identity/params.proto";
import "sonr/identity/did.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/sonr-io/sonr/x/identity/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/sonr-io/sonr/identity/params";
  }
  // Queries a DidDocument by index.
	rpc Did(QueryGetDidRequest) returns (QueryGetDidResponse) {
		option (google.api.http).get = "/sonr-io/sonr/identity/did/{did}";
	}

	// Queries a list of DidDocument items.
	rpc DidAll(QueryAllDidRequest) returns (QueryAllDidResponse) {
		option (google.api.http).get = "/sonr-io/sonr/identity/did";
	}

    //Queries a DIDDocument for the matching service
	rpc QueryByService(QueryByServiceRequest) returns (QueryByServiceResponse) {
		option (google.api.http).get = "/sonr-io/sonr/identity/service/{service_id}";
	}

    //Queries a DIDDocument for the matching key
	rpc QueryByKeyID(QueryByKeyIDRequest) returns (QueryByKeyIDResponse) {
		option (google.api.http).get = "/sonr-io/sonr/identity/key/{key_id}";
	}

    //Queries a DIDDocument for the matching AlsoKnownAs
	rpc QueryByAlsoKnownAs(QueryByAlsoKnownAsRequest) returns (QueryByAlsoKnownAsResponse) {
		option (google.api.http).get = "/sonr-io/sonr/identity/aka/{aka_id}";
	}

    //Queries a list of DIDDocument for the matching method
    rpc QueryByMethod(QueryByMethodRequest) returns (QueryByMethodResponse) {
		option (google.api.http).get = "/sonr-io/sonr/identity/method/{method_id}";
	}

	// Queries a list of QueryByNetwork items.
	rpc QueryByNetwork(QueryByNetworkRequest) returns (QueryByNetworkResponse) {
		option (google.api.http).get = "/sonr-io/sonr/identity/network/{network_id}";
	}

	// Request a Webauthn credential registration returns a VM and Credential
	rpc WebauthnRegistrationBegin(QueryWebauthnRegisterBeginRequest) returns (QueryWebauthnRegisterBeginResponse) {
		option (google.api.http) = {
			get: "/sonr-io/sonr/webauthn/register/begin"
		};
	}

	// Queries a list of VerifyWebauthnCredential items.
	rpc WebauthnRegistrationFinish(QueryWebauthnRegisterFinishRequest) returns (QueryWebauthnRegisterFinishResponse) {
		option (google.api.http) = {
			post: "/sonr-io/sonr/webauthn/register/finish"
			body: "*"
		};
	}

	// Request a Webauthn credential registration returns a VM and Credential
	rpc WebauthnLoginBegin(QueryWebauthnLoginBeginRequest) returns (QueryWebauthnLoginBeginResponse) {
		option (google.api.http) = {
			get: "/sonr-io/sonr/webauthn/login/begin"
		};
	}

	// Queries a list of VerifyWebauthnCredential items.
	rpc WebauthnLoginFinish(QueryWebauthnLoginFinishRequest) returns (QueryWebauthnLoginFinishResponse) {
		option (google.api.http) = {
			post: "/sonr-io/sonr/webauthn/login/finish"
			body: "*"
		};
	}
// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetDidRequest {
	  string did = 1;
}

message QueryGetDidResponse {
	DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryByServiceRequest{
	  string service_id = 1;
}

message QueryByServiceResponse{
	DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryByKeyIDRequest{
	  string key_id = 1;
}

message QueryByKeyIDResponse{
	DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryByAlsoKnownAsRequest{
	  string aka_id = 1;
}

message QueryByAlsoKnownAsResponse{
	DidDocument didDocument = 1 [(gogoproto.nullable) = false];
}

message QueryByMethodRequest{
    string method_id = 1;
	cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryByMethodResponse{
	repeated DidDocument didDocument = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllDidRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDidResponse {
	repeated DidDocument didDocument = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryByNetworkRequest {
	string network_id = 1;
}

message QueryByNetworkResponse {
	repeated DidDocument didDocument = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryWebauthnRegisterBeginRequest {
	string username = 1;
}

message QueryWebauthnRegisterBeginResponse {
}

message QueryWebauthnRegisterFinishRequest {
}

message QueryWebauthnRegisterFinishResponse {
}

message QueryWebauthnLoginBeginRequest {
}

message QueryWebauthnLoginBeginResponse {
}

message QueryWebauthnLoginFinishRequest {
}

message QueryWebauthnLoginFinishResponse {
}


// this line is used by starport scaffolding # 3
