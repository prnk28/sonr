syntax = "proto3";
package sonrio.sonr.identity;
import "sonr/identity/ssi.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/sonr-io/sonr/x/identity/types";

// Proof represents a credential/presentation proof as defined by the Linked Data Proofs 1.0 specification (https://w3c-ccg.github.io/ld-proofs/).
message Proof {
  // Type defines the specific proof type used. For example, an Ed25519Signature2018 type indicates that the proof includes a digital signature produced by an ed25519 cryptographic key.
  ProofType type = 1;

  // ProofPurpose defines the intent for the proof, the reason why an entity created it. Acts as a safeguard to prevent the proof from being misused for a purpose other than the one it was intended for.
  string proof_purpose = 2;

  // VerificationMethod points to the ID that can be used to verify the proof, eg: a public key.
  string verification_method = 3;

  // Created notes when the proof was created using a iso8601 string
  string created = 4;

  // Domain specifies the restricted domain of the proof
  string domain = 5;
}

// JSONWebSignature2020Proof is a VC proof with a signature according to JsonWebSignature2020
message JSONWebSignature2020Proof {
  Proof proof = 1;
  string jws = 2;
}

// WebauthnCredential contains all needed information about a WebAuthn credential for storage
message WebauthnCredential {
  // A probabilistically-unique byte sequence identifying a public key credential source and its authentication assertions.
  bytes id = 1;

	// The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
	// a Relying Party at registration time (see also public key credential). The private key portion of the credential key
	// pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
	// used as the attestation key pair, see self attestation for details.
  bytes public_key = 2;

	// The attestation format used (if any) by the authenticator when creating the credential.
  string attestation_type = 3;

	// The Authenticator information for a given certificate
  WebauthnAuthenticator authenticator = 4;
}

// WebauthnAuthenticator contains certificate information about a WebAuthn authenticator
message WebauthnAuthenticator {
  // The AAGUID of the authenticator. An AAGUID is defined as an array containing the globally unique
	// identifier of the authenticator model being sought.
  bytes aaguid = 1;

  // SignCount -Upon a new login operation, the Relying Party compares the stored signature counter value
	// with the new signCount value returned in the assertionâ€™s authenticator data. If this new
	// signCount value is less than or equal to the stored value, a cloned authenticator may
	// exist, or the authenticator may be malfunctioning.
  uint32 sign_count = 2;

  // CloneWarning - This is a signal that the authenticator may be cloned, i.e. at least two copies of the
	// credential private key may exist and are being used in parallel. Relying Parties should incorporate
	// this information into their risk scoring. Whether the Relying Party updates the stored signature
	// counter value in this case, or not, or fails the authentication ceremony or not, is Relying Party-specific.
  bool clone_warning = 3;
}

// VerifiableCredential represents a credential as defined by the Verifiable Credentials Data Model 1.0 specification (https://www.w3.org/TR/vc-data-model/).
message VerifiableCredential {
  // ID is the unique identifier for the credential.
  string id = 1;

  // Context is a list of URIs that define the context of the credential.
  repeated string context = 2;

  // Type is a list of URIs that define the type of the credential.
  repeated string type = 3;

  // Issuer is the DID of the issuer of the credential.
  string issuer = 4;

  // IssuanceDate is the date the credential was issued.
  string issuance_date = 5;

  // ExpirationDate is the date the credential expires.
  string expiration_date = 6;

  // CredentialSubject is the subject of the credential.
  map<string, string> credential_subject = 7;

  // Proof is the proof of the credential.
  map<string, string> proof = 8;
}
