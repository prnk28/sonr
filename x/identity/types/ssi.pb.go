// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sonr/identity/v1/ssi.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// KeyType is the type of key used to sign a DID document.
type KeyType int32

const (
	// No key type specified
	KeyType_KeyType_UNSPECIFIED KeyType = 0
	// JsonWebKey2020 is a VerificationMethod type. https://w3c-ccg.github.io/lds-jws2020/
	KeyType_KeyType_JSON_WEB_KEY_2020 KeyType = 1
	// ED25519VerificationKey2018 is the Ed25519VerificationKey2018 verification key type as specified here: https://w3c-ccg.github.io/lds-ed25519-2018/
	KeyType_KeyType_ED25519_VERIFICATION_KEY_2018 KeyType = 2
	// ECDSASECP256K1VerificationKey2019 is the EcdsaSecp256k1VerificationKey2019 verification key type as specified here: https://w3c-ccg.github.io/lds-ecdsa-secp256k1-2019/
	KeyType_KeyType_ECDSA_SECP256K1_VERIFICATION_KEY_2019 KeyType = 3
	// RSAVerificationKey2018 is the RsaVerificationKey2018 verification key type as specified here: https://w3c-ccg.github.io/lds-rsa2018/
	KeyType_KeyType_RSA_VERIFICATION_KEY_2018 KeyType = 4
)

var KeyType_name = map[int32]string{
	0: "KeyType_UNSPECIFIED",
	1: "KeyType_JSON_WEB_KEY_2020",
	2: "KeyType_ED25519_VERIFICATION_KEY_2018",
	3: "KeyType_ECDSA_SECP256K1_VERIFICATION_KEY_2019",
	4: "KeyType_RSA_VERIFICATION_KEY_2018",
}

var KeyType_value = map[string]int32{
	"KeyType_UNSPECIFIED":                           0,
	"KeyType_JSON_WEB_KEY_2020":                     1,
	"KeyType_ED25519_VERIFICATION_KEY_2018":         2,
	"KeyType_ECDSA_SECP256K1_VERIFICATION_KEY_2019": 3,
	"KeyType_RSA_VERIFICATION_KEY_2018":             4,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8482d84c350eb986, []int{0}
}

// ProofType is the type of proof used to present claims over a DID document.
type ProofType int32

const (
	// No proof type specified
	ProofType_ProofType_UNSPECIFIED ProofType = 0
	// JsonWebSignature2020 is a proof type. https://w3c-ccg.github.io/lds-jws2020/
	ProofType_ProofType_JSON_WEB_SIGNATURE_2020 ProofType = 1
	// ED25519Signature2018 is the Ed25519Signature2018 proof type as specified here: https://w3c-ccg.github.io/lds-ed25519-2018/
	ProofType_ProofType_ED25519_SIGNATURE_2018 ProofType = 2
	// EcdsaSecp256k1Signature2019 is the EcdsaSecp256k1Signature2019 proof type as specified here: https://w3c-ccg.github.io/lds-ecdsa-secp256k1-2019/
	ProofType_ProofType_ECDSA_SECP256K1_SIGNATURE_2019 ProofType = 3
	// RsaSignature2018 is the RsaSignature2018 proof type as specified here: https://w3c-ccg.github.io/lds-rsa2018/
	ProofType_ProofType_RSA_SIGNATURE_2018 ProofType = 4
)

var ProofType_name = map[int32]string{
	0: "ProofType_UNSPECIFIED",
	1: "ProofType_JSON_WEB_SIGNATURE_2020",
	2: "ProofType_ED25519_SIGNATURE_2018",
	3: "ProofType_ECDSA_SECP256K1_SIGNATURE_2019",
	4: "ProofType_RSA_SIGNATURE_2018",
}

var ProofType_value = map[string]int32{
	"ProofType_UNSPECIFIED":                    0,
	"ProofType_JSON_WEB_SIGNATURE_2020":        1,
	"ProofType_ED25519_SIGNATURE_2018":         2,
	"ProofType_ECDSA_SECP256K1_SIGNATURE_2019": 3,
	"ProofType_RSA_SIGNATURE_2018":             4,
}

func (x ProofType) String() string {
	return proto.EnumName(ProofType_name, int32(x))
}

func (ProofType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8482d84c350eb986, []int{1}
}

// ServiceType is the type of service used to provide a DID document.
type ServiceType int32

const (
	// No service type specified
	ServiceType_ServiceType_UNSPECIFIED ServiceType = 0
	// DIDCommMessaging is the DIDCommMessaging service type as specified here: https://identity.foundation/didcomm-messaging/spec/
	ServiceType_ServiceType_DID_COMM_MESSAGING ServiceType = 1
	// EncryptedDataVault is the EncryptedDataVault service type as specified here: https://identity.foundation/edv-spec/
	ServiceType_ServiceType_ENCRYPTED_DATA_VAULT ServiceType = 2
)

var ServiceType_name = map[int32]string{
	0: "ServiceType_UNSPECIFIED",
	1: "ServiceType_DID_COMM_MESSAGING",
	2: "ServiceType_ENCRYPTED_DATA_VAULT",
}

var ServiceType_value = map[string]int32{
	"ServiceType_UNSPECIFIED":          0,
	"ServiceType_DID_COMM_MESSAGING":   1,
	"ServiceType_ENCRYPTED_DATA_VAULT": 2,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8482d84c350eb986, []int{2}
}

func init() {
	proto.RegisterEnum("sonrio.sonr.identity.v1.KeyType", KeyType_name, KeyType_value)
	proto.RegisterEnum("sonrio.sonr.identity.v1.ProofType", ProofType_name, ProofType_value)
	proto.RegisterEnum("sonrio.sonr.identity.v1.ServiceType", ServiceType_name, ServiceType_value)
}

func init() { proto.RegisterFile("sonr/identity/v1/ssi.proto", fileDescriptor_8482d84c350eb986) }

var fileDescriptor_8482d84c350eb986 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x5f, 0x0b, 0xd2, 0x50,
	0x18, 0xc6, 0x37, 0x93, 0xa2, 0xb7, 0x9b, 0xb1, 0x08, 0xb1, 0x3f, 0x43, 0x23, 0xc1, 0x24, 0x37,
	0xb7, 0x30, 0xf2, 0xf2, 0xb8, 0x1d, 0xe5, 0x64, 0xce, 0xb1, 0x33, 0x0d, 0xbb, 0x39, 0xa0, 0xad,
	0xda, 0x45, 0x1e, 0xd9, 0x96, 0xb4, 0x6f, 0xd1, 0x77, 0x0a, 0xa2, 0x4b, 0x2f, 0xbb, 0x0c, 0xfd,
	0x22, 0xb1, 0xe5, 0xdc, 0x1a, 0x75, 0x75, 0xce, 0xcb, 0xf3, 0x7b, 0x5f, 0xf8, 0xc1, 0x03, 0xf7,
	0x23, 0xbe, 0x0b, 0xb5, 0xe0, 0x9d, 0xbf, 0x8b, 0x83, 0x38, 0xd1, 0x0e, 0xba, 0x16, 0x45, 0x81,
	0xba, 0x0f, 0x79, 0xcc, 0xe5, 0x46, 0x9a, 0x05, 0x5c, 0x4d, 0x1f, 0x35, 0x47, 0xd4, 0x83, 0xde,
	0xfb, 0x2e, 0xc2, 0xad, 0x99, 0x9f, 0x78, 0xc9, 0xde, 0x97, 0x1b, 0x70, 0xf7, 0xf2, 0x65, 0x4b,
	0x9b, 0x3a, 0xd8, 0x24, 0x13, 0x82, 0x2d, 0x49, 0x90, 0x1f, 0x41, 0x33, 0x0f, 0x5e, 0xd1, 0x85,
	0xcd, 0xde, 0xe0, 0x31, 0x9b, 0xe1, 0x35, 0x33, 0x06, 0xc6, 0x40, 0x12, 0xe5, 0xa7, 0xd0, 0xc9,
	0x63, 0x6c, 0x19, 0xc3, 0xa1, 0x3e, 0x62, 0x2b, 0xec, 0x92, 0x09, 0x31, 0x91, 0x47, 0x16, 0xf6,
	0x05, 0xd5, 0x5f, 0x4a, 0x35, 0x59, 0x87, 0xfe, 0x15, 0x35, 0x2d, 0x8a, 0x18, 0xc5, 0xa6, 0x63,
	0x0c, 0x5f, 0xcc, 0xf4, 0x7f, 0xae, 0x8c, 0xa4, 0x1b, 0x72, 0x07, 0xda, 0xf9, 0x8a, 0x4b, 0xd1,
	0x7f, 0x2e, 0xd7, 0x7b, 0xdf, 0x44, 0xb8, 0xed, 0x84, 0x9c, 0xbf, 0xcf, 0x54, 0x9a, 0x70, 0xef,
	0x3a, 0x54, 0x64, 0x3a, 0xd0, 0x2e, 0xa2, 0xab, 0x0e, 0x25, 0x53, 0x1b, 0x79, 0x4b, 0x17, 0xe7,
	0x52, 0x4f, 0xa0, 0x55, 0x60, 0xb9, 0x56, 0x99, 0xca, 0x7c, 0x9e, 0x41, 0xb7, 0x44, 0x55, 0x8c,
	0xfe, 0xa2, 0x53, 0x95, 0x16, 0x3c, 0x2c, 0xe8, 0x54, 0xa6, 0x72, 0xaf, 0xde, 0x8b, 0xe1, 0x0e,
	0xf5, 0xc3, 0x43, 0xb0, 0xf5, 0x33, 0x8d, 0x07, 0xd0, 0x28, 0x8d, 0x15, 0x91, 0xc7, 0xa0, 0x94,
	0x43, 0x8b, 0x58, 0xcc, 0x5c, 0xcc, 0xe7, 0x6c, 0x8e, 0x29, 0x45, 0x53, 0x62, 0x4f, 0xff, 0x58,
	0x94, 0x19, 0x6c, 0x9b, 0xee, 0xda, 0xf1, 0xb0, 0xc5, 0x2c, 0xe4, 0x21, 0xb6, 0x42, 0xcb, 0xd7,
	0x9e, 0x54, 0x1b, 0x8f, 0x7f, 0x9c, 0x14, 0xf1, 0x78, 0x52, 0xc4, 0x5f, 0x27, 0x45, 0xfc, 0x7a,
	0x56, 0x84, 0xe3, 0x59, 0x11, 0x7e, 0x9e, 0x15, 0xe1, 0x6d, 0xf7, 0x43, 0x10, 0x7f, 0xfc, 0xbc,
	0x51, 0xb7, 0xfc, 0x93, 0x96, 0x76, 0xa7, 0x1f, 0xf0, 0xec, 0xd5, 0xbe, 0x14, 0x45, 0x8b, 0x93,
	0xbd, 0x1f, 0x6d, 0x6e, 0x66, 0x45, 0x7b, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xd6, 0xfe, 0xfa,
	0x00, 0x86, 0x02, 0x00, 0x00,
}
